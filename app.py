from flask import Flask, request, jsonify
import requests
import traceback
import time

# üîê Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = "8382189772:AAFlSgb8hr75EF1Ry6Q8_iFmK5ZvbSUqjFU"
TELEGRAM_CHAT_ID = "1913932382"

# üì≤ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
def send_telegram(message):
    print(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")

    # –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON
    def method_json():
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        try:
            response = requests.post(url, json=payload, timeout=10)
            print(f"üì° –ú–µ—Ç–æ–¥ JSON - –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (JSON –º–µ—Ç–æ–¥)")
                    return True
            print(f"‚ùå JSON –º–µ—Ç–æ–¥ –æ—à–∏–±–∫–∞: {response.text}")
            return False
        except Exception as e:
            print(f"‚ùå JSON –º–µ—Ç–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False

    # –ú–µ—Ç–æ–¥ 2: Form-data
    def method_form_data():
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "HTML"
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            print(f"üì° –ú–µ—Ç–æ–¥ Form-data - –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (Form-data –º–µ—Ç–æ–¥)")
                    return True
            print(f"‚ùå Form-data –º–µ—Ç–æ–¥ –æ—à–∏–±–∫–∞: {response.text}")
            return False
        except Exception as e:
            print(f"‚ùå Form-data –º–µ—Ç–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False

    # –ú–µ—Ç–æ–¥ 3: –ë–µ–∑ parse_mode
    def method_simple():
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message
        }
        try:
            response = requests.post(url, json=payload, timeout=10)
            print(f"üì° –ú–µ—Ç–æ–¥ Simple - –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                result = response.json()
                if result.get('ok'):
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (Simple –º–µ—Ç–æ–¥)")
                    return True
            print(f"‚ùå Simple –º–µ—Ç–æ–¥ –æ—à–∏–±–∫–∞: {response.text}")
            return False
        except Exception as e:
            print(f"‚ùå Simple –º–µ—Ç–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False

    # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞
    def check_bot():
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe"
        try:
            response = requests.get(url, timeout=10)
            print(f"ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ - –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                bot_info = response.json()
                if bot_info.get('ok'):
                    print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bot_info['result']['username']}")
                    return True
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {response.text}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {e}")
            return False

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–æ—Ç–∞...")
    if not check_bot():
        print("‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π")
        return False

    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    methods = [method_json, method_form_data, method_simple]

    for i, method in enumerate(methods, 1):
        print(f"\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ {i}: {method.__name__}")
        if method():
            return True
        time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    print("‚ùå –í—Å–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    return False

# üöÄ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# üîî –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Copilot
@app.route('/copilot', methods=['POST', 'GET'])
def copilot_signal():
    try:
        if request.method == 'POST':
            data = request.get_json(force=True) if request.is_json else request.form
            print("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:", data)
            message = data.get("message", "üì¢ –°–∏–≥–Ω–∞–ª –æ—Ç –ö–æ–ø–∏!")
        else:
            message = "üì¢ GET –∑–∞–ø—Ä–æ—Å –∫ /copilot"

        print("ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ:", message)

        success = send_telegram(message)

        if success:
            return jsonify({"status": "sent", "message": message}), 200
        else:
            return jsonify({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram"}), 500

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ copilot_signal:", e)
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500

# üß™ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@app.route('/test', methods=['GET'])
@app.route('/test/<message>', methods=['GET'])
def test_telegram(message=None):
    test_message = message or "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç /test –º–∞—Ä—à—Ä—É—Ç–∞"
    print("üö¶ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:", test_message)

    success = send_telegram(test_message)

    if success:
        return f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {test_message}", 200
    else:
        return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", 500

# üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
@app.route('/debug', methods=['GET'])
def debug_info():
    info = {
        "token_exists": bool(TELEGRAM_TOKEN),
        "token_length": len(TELEGRAM_TOKEN),
        "chat_id": TELEGRAM_CHAT_ID,
        "endpoints": {
            "home": "/",
            "copilot": "/copilot",
            "test": "/test",
            "debug": "/debug"
        }
    }
    return jsonify(info)

# üåê –î–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/', methods=['GET'])
def home():
    return """
    <html>
        <head><title>XRPBot Webhook</title></head>
        <body>
            <h1>üöÄ XRPBot Webhook is running</h1>
            <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</p>
            <ul>
                <li><strong>POST /copilot</strong> - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤</li>
                <li><strong>GET /test</strong> - —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏</li>
                <li><strong>GET /test/–≤–∞—à–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ</strong> - —Ç–µ—Å—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</li>
                <li><strong>GET /debug</strong> - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</li>
            </ul>
        </body>
    </html>
    """

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print(f"üîê –¢–æ–∫–µ–Ω: {TELEGRAM_TOKEN[:10]}...")
    print(f"üí¨ Chat ID: {TELEGRAM_CHAT_ID}")
    app.run(debug=True, host='0.0.0.0', port=5000)
